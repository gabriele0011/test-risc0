{"abi":[],"bytecode":{"object":"0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212203ccf02a1a7cceac2af659259fe7523b0a941e887e024cc1f1ae5d6768c461e4364736f6c634300081e0033","sourceMap":"1504:1657:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212203ccf02a1a7cceac2af659259fe7523b0a941e887e024cc1f1ae5d6768c461e4364736f6c634300081e0033","sourceMap":"1504:1657:5:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"StructHash implements hashing for structs, incorporating type tags for domain separation. The goals of this library are: * Collision resistance: it should not be possible to find two semantically distinct values that   produce the same digest. * Simplicity: implementations should be simple to understand and write, as these methods must   be implemented in multiple languages and environments, including zkSNARK circuits. * Incremental openings: it should be possible to incrementally open a nested struct without   needing to open (very many) extra fields (i.e. the struct should be \\\"Merkle-ized\\\").\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Structural hashing routines used for RISC Zero data structures.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/risc0-ethereum/contracts/src/StructHash.sol\":\"StructHash\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":erc4626-tests/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/risc0-ethereum/lib/forge-std/src/\",\":halmos-cheatcodes/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/risc0-ethereum/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/risc0-ethereum/lib/openzeppelin-contracts/\",\":risc0-ethereum/=lib/risc0-ethereum/\",\":risc0/=lib/risc0-ethereum/contracts/src/\"]},\"sources\":{\"lib/risc0-ethereum/contracts/src/StructHash.sol\":{\"keccak256\":\"0x11d3406ef2b0e323ea9b9f9ecd971a0d84e269748300b22dc8f531c7dd51fcd0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a42e88934a979ac3896bf9316320769c4a1daa4c87bc81ed89dfedcb313b5db0\",\"dweb:/ipfs/QmcHhFiH5HQk36RRiLkz9C4Hu6TVLNEGSXmGDgFiJSULtp\"]},\"lib/risc0-ethereum/contracts/src/Util.sol\":{\"keccak256\":\"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c\",\"dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg\"]},\"lib/risc0-ethereum/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["erc4626-tests/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/risc0-ethereum/lib/forge-std/src/","halmos-cheatcodes/=lib/risc0-ethereum/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/risc0-ethereum/lib/openzeppelin-contracts/","openzeppelin/=lib/risc0-ethereum/lib/openzeppelin-contracts/","risc0-ethereum/=lib/risc0-ethereum/","risc0/=lib/risc0-ethereum/contracts/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/risc0-ethereum/contracts/src/StructHash.sol":"StructHash"},"evmVersion":"prague","libraries":{}},"sources":{"lib/risc0-ethereum/contracts/src/StructHash.sol":{"keccak256":"0x11d3406ef2b0e323ea9b9f9ecd971a0d84e269748300b22dc8f531c7dd51fcd0","urls":["bzz-raw://a42e88934a979ac3896bf9316320769c4a1daa4c87bc81ed89dfedcb313b5db0","dweb:/ipfs/QmcHhFiH5HQk36RRiLkz9C4Hu6TVLNEGSXmGDgFiJSULtp"],"license":"Apache-2.0"},"lib/risc0-ethereum/contracts/src/Util.sol":{"keccak256":"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82","urls":["bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c","dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg"],"license":"Apache-2.0"},"lib/risc0-ethereum/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"}},"version":1},"id":5}