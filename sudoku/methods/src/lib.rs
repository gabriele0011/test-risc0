// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Generated crate containing the image ID and ELF binary of the build guest.
include!(concat!(env!("OUT_DIR"), "/methods.rs"));

#[cfg(test)]
mod tests {
    use alloy_sol_types::{SolValue};
    use risc0_zkvm::{default_executor, ExecutorEnv};


    #[test]
        fn test_sudoku_4x4() {
            // Matrice di input 4x4 (più realistica con più celle vuote)
            let matrix = "1 0 0 4 0 0 0 0 0 0 0 0 4 0 0 1";
            
            /* creazione ambiente env con input
            *   ExecutorEnv      ambiente di esecuzione per la zkvm
            *   .builder()        per costruire l'ambiente
            *   write_slice()     passa i dati di input al programma guest
            *   build()           finalizza la costruzione dell'ambiente
            *   unwrap()          gestione degli errori 
            */
            let env = ExecutorEnv::builder()
                .write_slice(&matrix.abi_encode())
                .build()
                .unwrap();

            /* esecuzione zkvm con programma guest
            * default_exector()     ottiene l'esecutore zkvm di default
            * execute()             esegue il programma guest
            */
            let session_info = default_executor().execute(env, super::SUDOKU_ELF).unwrap();

            // Decodifica la soluzione restituita dal guest (ora come stringa)
            let solution_string: String = String::abi_decode(&session_info.journal.bytes).unwrap();

            // Soluzione attesa come stringa (da aggiornare dopo aver visto l'output)
            let expected_solution = "1 2 3 4 3 4 1 2 2 1 4 3 4 3 2 1";
            
            // Confronta le due stringhe
            assert_eq!(solution_string, expected_solution);
        }

#[test]
    fn test_sudoku_9x9() {
        
        // matrice di input
        
        let flat_matrix = "5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9";
        /*  creazione ambiente env con input
        *   ExecutorEnv      ambiente di esecuzione per la zkvm
        *   .builder()        per costruire l'ambiente
        *   write_slice()     passa i dati di input al programma guest
        *   build()           finalizza la costruzione dell'ambiente
        *   unwrap()          gestione degli errori 
        */
        let env = ExecutorEnv::builder()
            .write_slice(&flat_matrix.abi_encode())
            .build()
            .unwrap();


        /* esecuzione zkvm con programma guest
        * default_exector()     ottiene l'esecutore zkvm di default
        * execute()             esegue il programma guest
        */
        let session_info = default_executor().execute(env, super::SUDOKU_ELF).unwrap();

        // Decodifica la soluzione restituita dal guest (ora come stringa)
        let solution_string: String = String::abi_decode(&session_info.journal.bytes).unwrap();

        // Soluzione attesa come stringa
        let expected_solution = "5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9";
        
        // Confronta le due stringhe
        assert_eq!(solution_string, expected_solution);
    }

    #[test]
    fn test_sudoku_16x16() {
        // Matrice di input 16x16 (estratta dall'immagine originale)
        let matrix = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 5 6 7 8 9 10 11 12 13 14 15 16 1 2 3 4 9 10 11 12 13 14 15 16 1 2 3 4 5 6 7 8 13 14 15 16 1 2 3 4 5 6 7 8 9 10 11 12 2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 6 5 8 7 10 9 12 11 14 13 16 15 2 1 4 3 10 9 12 11 14 13 16 15 2 1 4 3 6 5 8 7 14 13 16 15 2 1 4 3 6 5 8 7 10 9 12 11 3 4 1 2 7 8 5 6 11 12 9 10 15 16 13 14 7 8 5 6 11 12 9 10 15 16 13 14 3 4 1 2 11 12 9 10 15 16 13 14 3 4 1 2 7 8 5 6 15 16 13 14 3 4 1 2 7 8 5 6 11 12 9 10 4 3 2 1 8 7 6 5 12 11 10 9 16 15 14 13 8 7 6 5 12 11 10 9 16 15 14 13 4 3 2 1 12 11 10 9 16 15 14 13 4 3 2 1 8 7 6 5 16 15 14 13 4 3 2 1 8 7 6 5 12 11 10 9";

        
        let env = ExecutorEnv::builder()
            .write_slice(&matrix.abi_encode())
            .build()
            .unwrap();

        let session_info = default_executor().execute(env, super::SUDOKU_ELF).unwrap();

        // Decodifica la soluzione restituita dal guest (ora come stringa)
        let solution_string: String = String::abi_decode(&session_info.journal.bytes).unwrap();

        // Per ora solo stampiamo la soluzione senza confrontarla
        // (la matrice originale dall'immagine è molto complessa e potrebbe non essere risolvibile in tempo ragionevole)
        let expected_solution = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 5 6 7 8 9 10 11 12 13 14 15 16 1 2 3 4 9 10 11 12 13 14 15 16 1 2 3 4 5 6 7 8 13 14 15 16 1 2 3 4 5 6 7 8 9 10 11 12 2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 6 5 8 7 10 9 12 11 14 13 16 15 2 1 4 3 10 9 12 11 14 13 16 15 2 1 4 3 6 5 8 7 14 13 16 15 2 1 4 3 6 5 8 7 10 9 12 11 3 4 1 2 7 8 5 6 11 12 9 10 15 16 13 14 7 8 5 6 11 12 9 10 15 16 13 14 3 4 1 2 11 12 9 10 15 16 13 14 3 4 1 2 7 8 5 6 15 16 13 14 3 4 1 2 7 8 5 6 11 12 9 10 4 3 2 1 8 7 6 5 12 11 10 9 16 15 14 13 8 7 6 5 12 11 10 9 16 15 14 13 4 3 2 1 12 11 10 9 16 15 14 13 4 3 2 1 8 7 6 5 16 15 14 13 4 3 2 1 8 7 6 5 12 11 10 9";
        assert_eq!(solution_string, expected_solution);
    }    
    
    
    #[test]
    fn test_sudoku_25x25() {
    
        let matrix = "0 2 3 0 5 6 7 8 9 10 11 12 13 14 15 16 0 18 19 20 21 22 23 24 25 \
                     6 7 8 9 10 11 12 13 14 15 16 17 0 19 20 21 22 23 24 25 1 2 3 4 0 \
                     11 12 13 14 15 16 0 18 19 0 21 22 23 24 0 1 2 3 4 5 6 7 8 9 10 \
                     16 17 18 19 20 21 22 23 24 25 1 2 3 4 5 6 7 8 9 0 11 12 13 14 15 \
                     21 22 23 24 25 1 0 3 4 5 6 7 8 9 0 11 12 13 14 15 16 0 18 19 20 \
                     2 3 4 5 1 7 8 9 10 6 12 13 14 15 11 17 18 19 20 16 22 23 24 25 21 \
                     7 8 9 10 6 12 13 14 15 11 17 18 19 20 16 22 23 24 25 21 2 0 4 0 1 \
                     12 13 14 15 11 17 0 19 20 16 22 23 24 0 21 2 3 4 0 1 7 8 9 10 6 \
                     17 18 19 20 16 22 23 24 25 21 2 3 4 5 1 7 8 9 10 6 12 13 14 15 11 \
                     0 23 24 25 21 2 3 4 5 0 7 8 9 10 0 12 13 14 15 11 17 18 19 20 16 \
                     3 4 5 1 2 8 9 10 6 7 13 14 15 11 12 0 19 20 0 17 23 24 25 21 22 \
                     8 9 10 6 7 13 14 15 11 12 18 19 20 16 17 23 24 25 21 22 3 4 5 1 2 \
                     13 0 15 11 12 18 19 20 16 17 23 24 25 21 22 3 4 5 1 2 8 9 10 0 7 \
                     18 19 20 0 17 23 24 25 21 22 3 4 0 1 2 8 9 0 6 7 13 14 0 11 12 \
                     23 24 25 21 22 3 4 5 0 0 8 9 10 6 7 13 14 15 11 12 18 19 20 16 17 \
                     4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 19 20 0 17 18 24 0 21 22 23 \
                     9 10 6 7 8 14 15 11 12 13 19 20 16 17 0 24 25 21 22 23 4 5 1 2 3 \
                     14 15 11 12 13 19 20 16 17 18 24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 \
                     19 20 16 17 18 24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 \
                     24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 19 0 16 17 18 \
                     5 1 2 3 4 10 6 7 8 9 15 11 12 13 14 20 0 17 18 19 25 21 22 23 0 \
                     10 6 7 8 9 15 11 12 0 14 20 16 17 18 19 25 21 22 23 0 5 1 2 3 4 \
                     15 11 12 13 14 20 16 17 18 19 25 21 22 0 24 5 1 2 3 4 10 6 7 8 9 \
                     20 16 17 18 19 25 21 0 23 24 5 1 2 3 4 10 6 7 8 9 15 11 12 13 14 \
                     0 21 22 0 24 5 1 2 3 4 10 6 7 8 9 15 11 12 0 14 0 16 17 18 0";

        
        let env = ExecutorEnv::builder()
            .write_slice(&matrix.abi_encode())
            .build()
            .unwrap();

        let session_info = default_executor().execute(env, super::SUDOKU_ELF).unwrap();

        // Decodifica la soluzione restituita dal guest (ora come stringa)
        let solution_string: String = String::abi_decode(&session_info.journal.bytes).unwrap();

        // Soluzione attesa (completamento della matrice sopra)
        let expected_solution = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \
                               6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 2 3 4 5 \
                               11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 2 3 4 5 6 7 8 9 10 \
                               16 17 18 19 20 21 22 23 24 25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \
                               21 22 23 24 25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \
                               2 3 4 5 1 7 8 9 10 6 12 13 14 15 11 17 18 19 20 16 22 23 24 25 21 \
                               7 8 9 10 6 12 13 14 15 11 17 18 19 20 16 22 23 24 25 21 2 3 4 5 1 \
                               12 13 14 15 11 17 18 19 20 16 22 23 24 25 21 2 3 4 5 1 7 8 9 10 6 \
                               17 18 19 20 16 22 23 24 25 21 2 3 4 5 1 7 8 9 10 6 12 13 14 15 11 \
                               22 23 24 25 21 2 3 4 5 1 7 8 9 10 6 12 13 14 15 11 17 18 19 20 16 \
                               3 4 5 1 2 8 9 10 6 7 13 14 15 11 12 18 19 20 16 17 23 24 25 21 22 \
                               8 9 10 6 7 13 14 15 11 12 18 19 20 16 17 23 24 25 21 22 3 4 5 1 2 \
                               13 14 15 11 12 18 19 20 16 17 23 24 25 21 22 3 4 5 1 2 8 9 10 6 7 \
                               18 19 20 16 17 23 24 25 21 22 3 4 5 1 2 8 9 10 6 7 13 14 15 11 12 \
                               23 24 25 21 22 3 4 5 1 2 8 9 10 6 7 13 14 15 11 12 18 19 20 16 17 \
                               4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 19 20 16 17 18 24 25 21 22 23 \
                               9 10 6 7 8 14 15 11 12 13 19 20 16 17 18 24 25 21 22 23 4 5 1 2 3 \
                               14 15 11 12 13 19 20 16 17 18 24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 \
                               19 20 16 17 18 24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 \
                               24 25 21 22 23 4 5 1 2 3 9 10 6 7 8 14 15 11 12 13 19 20 16 17 18 \
                               5 1 2 3 4 10 6 7 8 9 15 11 12 13 14 20 16 17 18 19 25 21 22 23 24 \
                               10 6 7 8 9 15 11 12 13 14 20 16 17 18 19 25 21 22 23 24 5 1 2 3 4 \
                               15 11 12 13 14 20 16 17 18 19 25 21 22 23 24 5 1 2 3 4 10 6 7 8 9 \
                               20 16 17 18 19 25 21 22 23 24 5 1 2 3 4 10 6 7 8 9 15 11 12 13 14 \
                               25 21 22 23 24 5 1 2 3 4 10 6 7 8 9 15 11 12 13 14 20 16 17 18 19";
        assert_eq!(solution_string, expected_solution);
    }

    
    #[test]
    fn test_sudoku_36x36() {
        let matrix = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \
                     7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 \
                     13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 \
                     19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \
                     25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
                     31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \
                     2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 \
                     8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 \
                     14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 \
                     20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 \
                     26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 \
                     32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 \
                     3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 \
                     9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 \
                     15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 \
                     21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 \
                     27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 \
                     33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 \
                     4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 \
                     10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 \
                     16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 \
                     22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 \
                     28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 \
                     34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 \
                     5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 \
                     11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 \
                     17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 \
                     23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 \
                     29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 \
                     35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 \
                     6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 \
                     12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 \
                     18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 \
                     24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 \
                     30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 \
                     36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29";
        
        let env = ExecutorEnv::builder()
            .write_slice(&matrix.abi_encode())
            .build()
            .unwrap();

        let session_info = default_executor().execute(env, super::SUDOKU_ELF).unwrap();

        // Decodifica la soluzione restituita dal guest (ora come stringa)
        let solution_string: String = String::abi_decode(&session_info.journal.bytes).unwrap();
        
        let expected_solution = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 25 26 27 28 29 30 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 31 32 33 34 35 36 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 20 21 22 23 24 19 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 26 27 28 29 30 25 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 32 33 34 35 36 31 2 3 4 5 6 1 8 9 10 11 12 7 14 15 16 17 18 13 20 21 22 23 24 19 26 27 28 29 30 25 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 21 22 23 24 19 20 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 27 28 29 30 25 26 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 33 34 35 36 31 32 3 4 5 6 1 2 9 10 11 12 7 8 15 16 17 18 13 14 21 22 23 24 19 20 27 28 29 30 25 26 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 22 23 24 19 20 21 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 28 29 30 25 26 27 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 34 35 36 31 32 33 4 5 6 1 2 3 10 11 12 7 8 9 16 17 18 13 14 15 22 23 24 19 20 21 28 29 30 25 26 27 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 23 24 19 20 21 22 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 29 30 25 26 27 28 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 35 36 31 32 33 34 5 6 1 2 3 4 11 12 7 8 9 10 17 18 13 14 15 16 23 24 19 20 21 22 29 30 25 26 27 28 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 24 19 20 21 22 23 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 30 25 26 27 28 29 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 36 31 32 33 34 35 6 1 2 3 4 5 12 7 8 9 10 11 18 13 14 15 16 17 24 19 20 21 22 23 30 25 26 27 28 29";
        
        
        
        
        assert_eq!(solution_string, expected_solution);

    }
}